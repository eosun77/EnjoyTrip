<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.ssafy.member.model.mapper.MemberMapper">

	<resultMap type="memberDto" id="member">
		<result column="uid" property="userId"/>
		<result column="name" property="userName"/>
		<result column ="id" property ="id"/>
	</resultMap>
	
	<resultMap type="memberDto" id="memberAll" extends="member">
		<result column="password" property="userPwd"/>
		<result column="email" property="email"/>
		<result column="register_time" property="joinDate"/>
		
		<result column="addr" property="addr"/>
		<result column="addr2" property="addr2"/>
		<result column="zipcode" property="zipCode"/>
	</resultMap>


	<!-- join  -->
	<select id="idCheck" parameterType="String" resultType="int">
		select count(uid)
		from user
		where uid = #{userid}
	</select>
	
	<select id="nameCheck" parameterType="String" resultType="int">
		select count(name)
		from user
		where name = #{userName}
	</select>
	
	<select id="emailCheck" parameterType="String" resultType="int">
		select count(email)
		from user
		where email = #{userEmail}
	</select>
	
	
	<insert id="joinMember" parameterType="memberDto">
		insert into user (uid,password, name, email, addr, addr2, zipcode )
		values (
		#{userId},
		#{userPwd},
		#{userName},
		#{email},
		#{addr},
		#{addr2},
		#{zipCode}
		)
		<!-- Dto수정  -->
	</insert>
	


	<!-- login -->
	<select id="loginMember" parameterType="map" resultMap="memberAll">
		select *
		from user
		where uid = #{userid} and password = #{userpwd}
	</select>
	
	<!-- update -->
		<update id="updateMember" parameterType="memberDto">
		update user
		<trim prefix="set" suffixOverrides=",">
			<if test='addr != null and !addr.equals("")'>addr = #{addr},</if>
			<if test='addr2 != null and !addr2.equals("")'>addr2 = #{addr2},</if>
			<if test='zipCode != null and !zipCode.equals("")'>zipCode = #{zipCode},</if>
		</trim>
		where id = #{id}
	</update>
	
	
	<!-- delete  -->
	
	<delete id="deleteMember" parameterType="String">
		delete from user
		where id = #{id}
	</delete>
		
	
	<!-- findpwd -->
	<select id="findPassword" parameterType="String" resultType="String">
		select password
		from user
		where uid= #{userId}
	</select>
	
	<!-- 
	<select id="listMember" resultMap="memberAll">
		select user_name, user_id, user_password, email_id, email_domain, join_date
		from members
		order by join_date
	</select>
	
	<select id="getMember" parameterType="string" resultMap="memberAll">
		select user_id, user_name, user_password, email_id, email_domain, join_date
		from members
		where user_id = #{userId}
	</select>

	 -->
	 
	 <!-- background  -->
	 <select id="backGround" resultType="String">
	 
	 SELECT t.firstimage
	 FROM
	 	(SELECT ROUND(
	 				RAND() * (
			 			(SELECT id FROM attraction order by id desc limit 1) 
			 			- (SELECT id FROM attraction LIMIT 1)
		 			) 
		 			+(SELECT id FROM attraction LIMIT 1)
	 			) random_num, @num:=@num + 1
	 	 FROM (SELECT @num:=0) AS a, attraction
	 	LIMIT 20
	 	 ) as r, attraction as t
	WHERE
		r.random_num = t.id
	 	
	 </select>
	
</mapper>